#!/bin/sh
set -ex

DEPLOYMENT_ENVIRONMENT=${DEPLOYMENT_ENVIRONMENT:-production}
WORKER_IMAGE=${WORKER_IMAGE:-zetaron/github-deployment-worker:1.0.0}

REDIS_VERSION=${REDIS_VERSION:-3.2.5}
DEPLOYMENT_QUEUE_WORKER_VERSION=${DEPLOYMENT_QUEUE_WORKER_VERSION:-1.0.0}

REDIS_REPLICAS=${REDIS_REPLICAS:-1}
DEPLOYMENT_QUEUE_WORKER_REPLICAS=${DEPLOYMENT_QUEUE_WORKER_REPLICAS:-1}

if [ "$(docker volume ls -q | grep "deployment-queue")" == "" ]
then
    docker volume create \
           --name deployment-queue
fi

if [ "$(docker volume ls -q | grep "deployment-queue-worker-secrets")" == "" ]
then
    docker volume create \
           --name deployment-queue-worker-secrets
fi

if [ "$(docker network ls -q --filter name=deployment-queue-backend)" == "" ]
then
    docker network create \
           --driver overlay \
           deployment-queue-backend
fi

if [ "$(docker service ls -q --filter name=deployment-queue)" == "" ]
then
    docker service create \
           --name deployment-queue \
           --network deployment-queue-backend \
           --mount type=volume,source=deployment-queue,destination=/data \
           --replicas $REDIS_REPLICAS \
           --constraint "node.hostname == cluster-node-1" \
           redis:${REDIS_VERSION}-alpine
else
    docker service update \
           --image redis:${REDIS_VERSION}-alpine \
           --replicas $REDIS_REPLICAS \
           deployment-queue
fi

if [ "$(docker service ls -q --filter name=deployment-queue-worker)" == "" ]
then
    docker service create \
           --name deployment-queue-worker \
           --network deployment-queue-backend \
           --env REDIS_URL=deployment-queue:6379 \
           --env WORKER_IMAGE=$WORKER_IMAGE \
           --replicas $DEPLOYMENT_QUEUE_WORKER_REPLICAS \
           --constraint "node.hostname == cluster-node-1" \
           zetaron/deployment-queue-worker:$DEPLOYMENT_QUEUE_WORKER_VERSION
else
    docker service update \
           --image zetaron/deployment-queue-worker:$DEPLOYMENT_QUEUE_WORKER_VERSION \
           --env-add WORKER_IMAGE=$WORKER_IMAGE \
           --replicas $DEPLOYMENT_QUEUE_WORKER_REPLICAS \
           deployment-queue-worker
fi
